# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import batch_request_pb2 as batch__request__pb2


class batchStub(object):
  """The batch service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getBatch = channel.unary_unary(
        '/batch.batch/getBatch',
        request_serializer=batch__request__pb2.batch_info.SerializeToString,
        response_deserializer=batch__request__pb2.batch_data.FromString,
        )


class batchServicer(object):
  """The batch service definition.
  """

  def getBatch(self, request, context):
    """Sends a batch request
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_batchServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getBatch': grpc.unary_unary_rpc_method_handler(
          servicer.getBatch,
          request_deserializer=batch__request__pb2.batch_info.FromString,
          response_serializer=batch__request__pb2.batch_data.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'batch.batch', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
